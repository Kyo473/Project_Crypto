volumes:
  policy-enforcement-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./policy-enforcement-service
  e2e-test-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./e2e

services:
  rabbitmq:
    image: rabbitmq:3.12.8-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - custom
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 10
  Tradedb:
    container_name: "tradedb"
    image: postgis/postgis:13-master
    restart : always
    environment:
      POSTGRES_PASSWORD: tradedb
      POSTGRES_USER: tradedb
      POSTGRES_DB: tradedb
    ports:
      - "5432:5432"
    networks:
      - custom
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "tradedb", "-d", "tradedb", "-h", "localhost", "-p", "5432"]
      interval: 5s
      retries: 5
  Chatdb:
    container_name: "chatdb"
    image: postgres:14.1-alpine
    restart : always
    environment:
      POSTGRES_PASSWORD: chatdb
      POSTGRES_USER: chatdb
      POSTGRES_DB: chatdb
    ports:
      - "5433:5432"
    networks:
      - custom
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "chatdb", "-d", "chatdb", "-h", "localhost", "-p", "5432"]
      interval: 5s
      retries: 5
  Userdb:
    container_name: "userdb"
    image: postgres:14.1-alpine
    restart : always
    environment:
      POSTGRES_PASSWORD: userdb
      POSTGRES_USER: userdb
      POSTGRES_DB: userdb
    ports:
      - "5434:5432"
    networks:
      - custom
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "userdb", "-d", "userdb", "-h", "localhost", "-p", "5432"]
      interval: 5s
      retries: 5
  trade-service:
    container_name: "trade-service"
    build:
      context: ../Services/TradeService
      dockerfile: ./Dockerfile
    environment:
      POSTGRES_DSN: postgresql://tradedb:tradedb@Tradedb:5432/tradedb
    ports:
      - "5000:5000"
    networks:
      - custom
    depends_on:
      Tradedb:
        condition: service_healthy
  chat-service:
    container_name: "chat-service"
    build:
      context: ../Services/ChatService
      dockerfile: ./Dockerfile
    environment:
      - POSTGRES_DSN=postgresql+asyncpg://chatdb:chatdb@Chatdb:5432/chatdb
    ports:
      - "5001:5001"
    networks:
      - custom
    depends_on:
      Chatdb:
        condition: service_healthy
  user-service:
    container_name: "user-service"
    build:
      context: ../Services/UserService
      dockerfile: ./Dockerfile
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN_ASYNC}
      JWT_SECRET: ${JWT_SECRET}
      RESET_PASSWORD_TOKEN_SECRET: ${RESET_PASSWORD_TOKEN_SECRET}
      VERIFICATION_TOKEN_SECRET: ${VERIFICATION_TOKEN_SECRET}
      AMQP: ${AMQP}
    ports:
      - "5002:5002"
    networks:
      - custom
    depends_on:
      Userdb:
        condition: service_healthy
  policy-enforcement-service:
    build:
      context: ../Services/PolicyService
      dockerfile: ./Dockerfile
    volumes:
      - policy-enforcement-data:/mnt/
    ports:
    - "5003:5003"
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POLICIES_CONFIG_PATH: ${POLICIES_CONFIG_PATH}
    networks:
      - custom
  notify-service:
    build:
      context: ../Services/NotifyService
      dockerfile: ./DockerFile
    environment:
      SMTP_EMAIL: ${SMTP_EMAIL}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_URL: ${SMTP_URL}
      SMTP_PORT: ${SMTP_PORT}
      AMQP: ${AMQP}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - custom
  # test-runner:
  #   image: python:3.11
  #   volumes:
  #     - e2e-test-data:/mnt/
  #   command: >
  #     bash -c "pip install requests pydantic sqlalchemy psycopg2-binary
  #     && pip install --upgrade pip
  #     && python -m unittest -v /mnt/test.py"
  #   depends_on:
  #     - policy-enforcement-service
  #     - trade-service
  #   networks:
  #     - custom
  # react-app:
  #   build:
  #     context: ../Front_Project_crypto
  #     dockerfile: ./Dockerfile 
  #   ports:
  #     - "3000:3000" 
  #   networks:
  #     - custom
networks:
  custom:
    driver: bridge

 