version: "3.0"
volumes:
  policy-enforcement-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./policy-enforcement-service
  e2e-test-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./e2e

services:
  rabbitmq:
    image: rabbitmq:3.12.8-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - custom
  Tradedb:
    container_name: "Tradedb"
    image: postgis/postgis:13-master
    restart : always
    environment:
      POSTGRES_PASSWORD: tradedb
      POSTGRES_USER: tradedb
      POSTGRES_DB: tradedb
    ports:
      - "5432:5432"
    networks:
      - custom
  trade-service:
    build:
      context: ../Services/TradeService
      dockerfile: ./Dockerfile
    environment:
      POSTGRES_DSN: postgresql://tradedb:tradedb@Tradedb:5432/tradedb
    ports:
      - "5000:5000"
    networks:
      - custom
    depends_on:
      - Tradedb
  Chatdb:
    container_name: "Chatdb"
    image: postgres:14.1-alpine
    restart : always
    environment:
      POSTGRES_PASSWORD: chatdb
      POSTGRES_USER: chatdb
      POSTGRES_DB: chatdb
    ports:
      - "5433:5432"
    networks:
      - custom
  chat-service:
    build:
      context: ../Services/ChatService
      dockerfile: ./Dockerfile
    environment:
      - POSTGRES_DSN=postgresql+asyncpg://chatdb:chatdb@Chatdb:5432/chatdb
    ports:
      - "5001:5001"
    networks:
      - custom
    depends_on:
      - Chatdb
  Userdb:
    container_name: "userdb"
    image: postgres:14.1-alpine
    restart : always
    environment:
      POSTGRES_PASSWORD: userdb
      POSTGRES_USER: userdb
      POSTGRES_DB: userdb
    ports:
      - "5434:5432"
    networks:
      - custom
  user-service:
    build:
      context: ../Services/UserService
      dockerfile: ./Dockerfile
    environment:
      POSTGRES_DSN: ${POSTGRES_DSN_ASYNC}
      JWT_SECRET: ${JWT_SECRET}
      RESET_PASSWORD_TOKEN_SECRET: ${RESET_PASSWORD_TOKEN_SECRET}
      VERIFICATION_TOKEN_SECRET: ${VERIFICATION_TOKEN_SECRET}
      AMQP: ${AMQP}
    ports:
      - "5002:5002"
    networks:
      - custom
    depends_on:
      - Userdb
  policy-enforcement-service:
    build:
      context: ../Services/PolicyService
      dockerfile: ./Dockerfile
    volumes:
      - policy-enforcement-data:/mnt/
    ports:
    - "5003:5003"
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POLICIES_CONFIG_PATH: ${POLICIES_CONFIG_PATH}
    networks:
      - custom
  notify-service:
    build:
      context: ../Services/NotifyService
      dockerfile: ./DockerFile
    environment:
      PASS: ${PASS}
      EMAIL : ${EMAIL}
      AMQP: ${AMQP}
    depends_on:
       - rabbitmq
    networks:
      - custom
  test-runner:
    image: python:3.11
    volumes:
      - e2e-test-data:/mnt/
    command: >
      bash -c "pip install requests pydantic sqlalchemy psycopg2-binary
      && pip install --upgrade pip
      && python -m unittest -v /mnt/test.py"
    depends_on:
      - policy-enforcement-service
    networks:
      - custom
networks:
  custom:
    driver: bridge

 